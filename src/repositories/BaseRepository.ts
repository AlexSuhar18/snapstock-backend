import PersistenceService from "../services/PersistenceService";
import PluginManager from "../core/PluginManager";
import EventService from "../services/EventService";
import { EventTypes } from "../events/EventTypes";

/**
 * âœ… ClasÄƒ abstractÄƒ pentru accesarea datelor
 */
abstract class BaseRepository<T> {
  protected db: PersistenceService;
  protected collectionName: string;

  constructor(collectionName: string) {
    this.db = PersistenceService.getFirestore(); // ðŸ”¹ ObÈ›inem instanÈ›a corectÄƒ
    this.collectionName = collectionName;
  }

  /**
   * âœ… VerificÄƒ dacÄƒ modul este activ Ã®nainte de a accesa datele
   */
  private ensureModuleActive(): void {
    if (!PluginManager.isModuleActive(this.collectionName)) {
      throw new Error(`${this.collectionName} module is disabled`);
    }
  }

  /**
   * âœ… ObÈ›ine un document dupÄƒ ID
   */
  async getById(id: string): Promise<T | null> {
    this.ensureModuleActive();
    return this.db.getDocumentById(this.collectionName, id);
  }

  /**
   * âœ… ObÈ›ine toate documentele din colecÈ›ie
   */
  async getAll(): Promise<T[]> {
    this.ensureModuleActive();
    return this.db.getAllDocuments(this.collectionName);
  }

  /**
   * âœ… ObÈ›ine un singur document pe baza unui cÃ¢mp specific
   */
  async getByField(field: string, value: any): Promise<T | null> {
    this.ensureModuleActive();
    return this.db.getSingleDocumentByField(this.collectionName, field, value);
  }

  /**
   * âœ… CreeazÄƒ un document nou È™i emite un eveniment
   */
  async create(data: T): Promise<T> {
    this.ensureModuleActive();
    const id = this.db.generateId(this.collectionName);
    await this.db.createDocument(this.collectionName, id, data);
    await EventService.emitEvent(EventTypes.INVITATION_CREATED, { id, ...(data as any) });
    return { ...(data as any), id };
}

  /**
   * âœ… ActualizeazÄƒ un document existent È™i emite un eveniment
   */
  async update(id: string, data: Partial<T>): Promise<void> {
    this.ensureModuleActive();
    await this.db.updateDocument(this.collectionName, id, data);

    // ðŸ”¥ Emitere eveniment la update
    await EventService.emitEvent(EventTypes.INVITATION_UPDATED, { id, ...(data as any) });
  }

  /**
   * âœ… È˜terge un document È™i emite un eveniment
   */
  async delete(id: string): Promise<void> {
    this.ensureModuleActive();
    await this.db.deleteDocument(this.collectionName, id);

    // ðŸ”¥ Emitere eveniment cÃ¢nd un document este È™ters
    await EventService.emitEvent(EventTypes.INVITATION_DELETED, { inviteId: id });
  }
}

export default BaseRepository;
