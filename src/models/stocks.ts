import { db } from "../config/firebase";

export interface Stock {
    id?: string;
    productName: string;
    quantity: number;
}

// Add a new product in Firestore
export const addStock = async (stock: Stock): Promise<string> => {
    const docRef = await db.collection("stocks").add(stock);
    return docRef.id; // ID generated by Firestore
};

// Get all products from Firestore
export const getAllStocks = async (): Promise<Stock[]> => {
    const snapshot = await db.collection("stocks").get();
    return snapshot.docs.map(doc => {
        const data = doc.data();

        if (!data.productName || !data.quantity === undefined) {
            console.error(`⚠️ Documentul ${doc.id} nu are toate câmpurile necesare.`);
            return null;
        }
        return {
            id: doc.id,
            productName: data.productName,
            quantity: data.quantity,
        };
    }).filter (stock => stock !== null) as Stock[];
};

// Get a product by ID from Firestore
export const getStockById = async (id: string): Promise<Stock | null> => {
   const doc = await db.collection("stocks").doc(id).get();
   return doc.exists ? { id: doc.id, ...doc.data() } as Stock : null;
};

// Update a product by ID in Firestore
export const updateStock = async (id: string, data: Partial<Stock>): Promise<boolean> => {
    const docRef = db.collection("stocks").doc(id);
    const doc = await docRef.get();

    if (!doc.exists) {
        return false;
    }

    await docRef.update(data);
    return true;
};

// Delete a product by ID from Firestore
export const deleteStock = async (id: string): Promise<boolean> => {
    const docRef = db.collection("stocks").doc(id);
    const doc = await docRef.get();

    if (!doc.exists) {
        return false;
    }

    await docRef.delete();
    return true;
};