import express from "express";
import dotenv from "dotenv";
import stocksRoutes from "./routes/stocksRoutes";
import superuserRoutes from "./routes/superuserRoutes";
import inviteRoutes from "./routes/inviteRoutes";
import DebugRoutes from "./routes/DebugRoutes";
import LoggingMiddleware from "./middlewares/loggingMiddleware";
import LoggerService from "./services/LoggerService";
import EventBus from "./events/EventBus";

// ‚úÖ √éncƒÉrcƒÉm variabilele de mediu
dotenv.config({ path: `.env.${process.env.NODE_ENV}` });

/**
 * ‚úÖ Validare variabile esen»õiale
 */
const REQUIRED_ENV_VARS = ["PORT", "ALLOWED_DOMAINS"];

REQUIRED_ENV_VARS.forEach((envVar) => {
  if (!process.env[envVar]) {
    LoggerService.logError(`‚ùå Missing environment variable: ${envVar}`);
    process.exit(1);
  }
});

const PORT = process.env.PORT || 3000;
const app = express();

try {
  LoggerService.logInfo("‚úÖ Initializing application...");

  // ‚úÖ Middleware-uri
  app.use(LoggingMiddleware.requestLogger);
  app.use(express.json());

  // ‚úÖ Definim rutele aplica»õiei
  app.use("/api", stocksRoutes);
  app.use("/admin", superuserRoutes);
  app.use("/api/users", inviteRoutes);
  app.use("/api/debug", DebugRoutes);

  // ‚úÖ Ruta principalƒÉ
  app.get("/", (req, res) => {
    res.send("üöÄ Server is running!");
  });

  // ‚úÖ Middleware pentru erori
  app.use(LoggingMiddleware.errorLogger);

  // ‚úÖ Ini»õializƒÉm EventBus (gestionare evenimente)
  try {
    EventBus.emit("server:started", { port: PORT });
    LoggerService.logInfo("‚úÖ EventBus initialized.");
  } catch (eventBusError) {
    LoggerService.logError("‚ùå Error initializing EventBus:", eventBusError);
  }

  // ‚úÖ Pornim serverul
  const server = app.listen(PORT, () => {
    LoggerService.logInfo(`üöÄ Server running on port ${PORT}`);
  });

  /**
   * ‚úÖ Gestionare shutdown controlat
   */
  const gracefulShutdown = () => {
    LoggerService.logInfo("‚ö†Ô∏è Shutting down server...");

    server.close(() => {
      LoggerService.logInfo("‚úÖ Server closed.");
      process.exit(0);
    });
  };

  process.on("SIGINT", gracefulShutdown);
  process.on("SIGTERM", gracefulShutdown);
} catch (error) {
  LoggerService.logError("‚ùå Fatal error on startup:", error);
  process.exit(1); // √énchidem aplica»õia √Æn caz de eroare criticƒÉ
}
